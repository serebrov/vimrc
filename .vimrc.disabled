" Use :CoverageShow to show file coverage for the current buffer.
" Use :CoverageToggle to toggle coverage visibility for the current file.
" For python requires `pip install coverage`
" Add maktaba and coverage to the runtimepath.
" (The latter must be installed before it can be used.)
Plug 'google/vim-maktaba'
Plug 'google/vim-coverage'

" """""" Javascript
" Plug 'pangloss/vim-javascript'
" let g:javascript_conceal = 0
" Plug 'othree/javascript-libraries-syntax.vim'
" let g:used_javascript_libs = 'jquery,underscore,angularjs'
" " ejs templates syntax highlight
" Plug 'briancollins/vim-jst'

" " Typescript syntax
" Plug 'leafgarland/typescript-vim'

"""""" JSON
" better json highlighting
" Plug 'elzr/vim-json'

"""""" Python
" Improved syntax highlight
" Plug 'hdima/python-syntax'

" old vim setup
" else
  " Plug 'davidhalter/jedi-vim'
  " fetching can take a long time causing the timeout
  " to manually install it
  "  git clone --recursive https://github.com/Valloric/YouCompleteMe.git
  " Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
" endif

" Install: cd ~/.vim/bundle/ropevim
"          python setup.py install
" See: https://github.com/python-rope/ropevim
" Plug 'python-rope/ropevim'
" let ropevim_vim_completion=1
" let ropevim_extended_complete=1

"Plug 'klen/python-mode'
" Correct python code indenting
" Plug 'hynek/vim-python-pep8-indent'
" :Ped sqlalchemy.orm -> open the module from current virtual env
" Plug 'sloria/vim-ped'
" " Generate docstrings with :Pydocstring
" "   note: UltiSnips is also able to generate docstring templates, but
" "         I didn't find the way to trigger it for already existing code
" let g:template_vim_template_dir = $HOME . "/.vim/templates/pydocstring"
" Plug 'heavenshell/vim-pydocstring'
" nmap <silent> <nop> <Plug>(pydocstring)
" augroup DocMap
"   autocmd!
"   autocmd FileType python nnoremap <Leader>pd :Pydocstring<CR>
" augroup END
"
" let g:doge_doc_standard_python = 'google'
" let g:doge_mapping = '<Leader>pd'
" " Generate docstrings for different languages
" " Tab / Shift-Tab to move between placeholders.
" " :DogeGenerate to generate manually or use <Leader>pd.
" Plug 'kkoomen/vim-doge'

"""""" Documentation
" php documenter
" Plug 'mikehaertl/pdv-standalone'
" phpDocumenter
" let g:pdv_cfg_Package = "app"
" let g:pdv_cfg_Version = ""
" let g:pdv_cfg_Author = "Boris Serebrov"
" let g:pdv_cfg_Copyright = ""
" let g:pdv_cfg_License = ""
"Plug 'heavenshell/vim-jsdoc'
""JSDoc
"let g:jsdoc_default_mapping = 0
"augroup DocMap
"  autocmd!

"  " autocmd FileType php inoremap <Leader>pd <ESC>:call PhpDocSingle()<CR>i
"  " autocmd FileType php nnoremap <Leader>pd :call PhpDocSingle()<CR>
"  " autocmd FileType php vnoremap <Leader>pd :call PhpDocRange()<CR>

"  autocmd FileType javascript nnoremap <Leader>pd :JsDoc<CR>

"augroup END


    " tag files
    " ';/' - this will look in the current directory for "tags", and work up the tree
    " towards root until one is found
    " set tags=tags;/
  " }}}

  " " LSP-based code completion.
  " let g:coq_settings = { 'auto_start': v:true, 'keymap.jump_to_mark': '<C-X>' }
  " " or let g:coq_settings = { 'auto_start': 'shut-up' }
  " " Note: another alternative - https://github.com/hrsh7th/nvim-cmp/
  " " main one
  " Plug 'ms-jpq/coq_nvim', {'branch': 'coq'}
  " " 9000+ Snippets
  " Plug 'ms-jpq/coq.artifacts', {'branch': 'artifacts'}
  " " lua & third party sources -- See https://github.com/ms-jpq/coq.thirdparty
  " " Need to **configure separately**
  " Plug 'ms-jpq/coq.thirdparty', {'branch': '3p'}
  " " - shell repl
  " " - nvim lua api
  " " - scientific calculator
  " " - comment banner
  " " - etc


  " :PP: Pretty print. With no argument, acts as a REPL.
  " :Runtime: Reload runtime files. Like :runtime!, but it unlets any include guards first.
  " :Disarm: Remove a runtime file's maps, commands, and autocommands, effectively disabling it.
  " :Scriptnames: Load :scriptnames into the quickfix list.
  " :Verbose: Capture the output of a :verbose invocation into the preview window.
  " :Time: Measure how long a command takes.
  " :Breakadd: Like its lowercase cousin, but makes it much easier to set breakpoints inside functions. Also :Breakdel.
  " :Vedit: Edit a file relative the runtime path. For example, :Vedit plugin/scriptease.vim. Also, :Vsplit, :Vtabedit, etc. Extracted from pathogen.vim.
  " K: Look up the :help for the VimL construct under the cursor.
  " zS: Show the active syntax highlighting groups under the cursor.
  " g!: Eval a motion or selection as VimL and replace it with the result.
  "     This is handy for doing math, even outside of VimL. It's so handy, in fact, that it probably deserves its own plugin.
  " Plug 'tpope/vim-scriptease'

  " Interactive scratchpad for python / node / coffee / haskell / ruby / ocaml
  " / r / closure / php
  " PHP requires psysh
  " Codi [filetype] activates Codi for the current buffer, using the provided filetype or the buffer's filetype.
  " Codi! deactivates Codi for the current buffer.
  " Codi!! [filetype] toggles Codi for the current buffer.
  " Plus there is a shell-wrapper (in ~/.zshrc, call with code [filetype] [filename]
  " Plug 'metakirby5/codi.vim'

" solidity syntax
" Plug 'tomlion/vim-solidity'

" Note: coc.nvim supports UlitSnips snippets from honza/vim-snippets
" Plug 'SirVer/ultisnips'
" " Activate with TAB, better with autocompletion plugin,
" " the UlitSnips adds entries marked [US]
" " select the one you need and press <Tab>,
" " don't go out of insert mode, enter parts of the template
" " and press <Tab> again to move to the next placeholder
" " If you exit the insert mode - just get into insert again and
" " use <Tab> / <Shift-Tab> to move between placeholders.
" "
" " http://0x3f.org/blog/make-youcompleteme-ultisnips-compatible/
" " let g:ycm_key_list_select_completion = ['<C-TAB>', '<Down>']
" " let g:ycm_key_list_previous_completion = ['<C-S-TAB>', '<Up>']
" " let g:SuperTabDefaultCompletionType = '<C-Tab>'

" let g:ycm_autoclose_preview_window_after_completion = 1
" let g:ycm_autoclose_preview_window_after_insertion = 1
" let g:ycm_key_list_select_completion = []
" let g:ycm_key_list_previous_completion = []
" let g:UltiSnipsJumpForwardTrigger="<tab>"
" let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" let g:ultisnips_python_style="google"
" let g:UltiSnipsExpandTrigger="<c-tab>"
" let g:UltiSnipsListSnippets="<c-s-tab>"
" " repository of snippets
" Plug 'honza/vim-snippets'

"""""" PHP
" php completion - it should be copied to autoload/phpcomplete.vim
" Plug 'shawncplus/phpcomplete.vim'
" php 5.3 syntax
" Plug 'StanAngeloff/php.vim'
" Plug '2072/PHP-Indenting-for-VIm'
"
" similar: https://github.com/xolox/vim-easytags
" Plug 'joonty/vim-taggatron'

" let test#strategy = {
"   \ 'nearest': 'make',
"   \ 'file':    'dispatch',
"   \ 'suite':   'neovim',
" \}
 
" let test#javascript#runner = 'jest'
" let test#javascript#jest#executable = 'npm run test:unit'
" " let test#javascript#jest#executable = '../tools/local/frontend-cmd.sh npm run test:unit -- '
" " let g:test#javascript#jest#options = ''
" " let test#project_root = 'frontend' " projectroot#guess()

" " function! TypeScriptTransform(cmd) abort
" "   return substitute(a:cmd, '\v/(\S+)\.ts', '/\1.js', '')
" " endfunction
" " let g:test#custom_transformations          = {'typescript': function('TypeScriptTransform')}
" " let g:test#transformation                  = 'typescript'

" " Run tests from vim
" " these "Ctrl mappings" work well when Caps Lock is mapped to Ctrl
" " nmap <silent> t<C-n> :TestNearest<CR>
" " nmap <silent> t<C-f> :TestFile<CR>
" " nmap <silent> t<C-s> :TestSuite<CR>
" " nmap <silent> t<C-l> :TestLast<CR>
" " nmap <silent> t<C-g> :TestVisit<CR>
" " Plug 'vim-test/vim-test'
" " Note: for python this is also possible with `nvim-python-dap`:
" " test nearest funciton:
" "   :lua require('dap-python').test_method()
" " Plug 'rcarriga/vim-ultest'

  
" " Taggatron {{{
" augroup MyAutoCmdTags
"   let g:tagcommands = {
"   \    "python" : {
"   \        "tagfile": ".python.tags",
"   \         "args": "-R",
"   \         "filesappend": "/**"
"   \    },
"   \    "php" : {
"   \        "tagfile":".php.tags",
"   \        "args":"-R",
"   \        "filesappend": "/**"
"   \    },
"   \    "javascript" : {
"   \        "tagfile":".js.tags",
"   \        "args":"-R --exclude=node_modules --exclude=*.min.js --exclude=*-min.js",
"   \        "filesappend": "/**"
"   \    }
"   \}
"   let g:taggatron_verbose=0
"   autocmd MyAutoCmdTags FileType php call taggatron#SetTags(".php.tags")
"   autocmd MyAutoCmdTags FileType python call taggatron#SetTags(".python.tags")
"   autocmd MyAutoCmdTags FileType javascript call taggatron#SetTags(".js.tags")
" augroup END

  " todo: check http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
  "       and https://github.com/tpope/vim-fugitive/issues/104

" }}}

" Syntax checker
" Python - pip install flake8 (pyflakes + pep8)
"          pip install pep257 - docstring conventions
"          pip install mypy-lang - python3 static type checks
"          pip install vulture - dead code checks
"          pip install frosted - pyflakes re-work
"          pip install pylint
" Note: pylint also checks docstrings + gives a lot of other notices, not
" always useful
" The pylint behavior can be modified via pylintrc (place into the project
" root) or with special comments, like:
"
"    except Exception as error:  # pylint: disable=W0703
"
" here we disable the [broad-except] warning, the warning name is shown in
" the error message
"
" The warning id (W0703) can be shown using pylint itself:
"
" $ pylint --help-msg broad-except
"  :broad-except (W0703): *Catching too general exception %s*
"  Used when an except catches a too general exception, possibly burying
"  unrelated errors. This message belongs to the exceptions checker.
"
" For flake8, to disable the error check use comment # noqa
" to disable the specific error # noqa: F401
"
" coc has linting support too, see coc-settings.json
" if has('nvim')
"   " To get the errors, save the file or run :Neomake
"   " then open the local error list with :lopen to see the
"   " errors (and it is possible to navigate via ]l [l - this is from unimpaired
"   Plug 'benekastah/neomake'
"   let g:neomake_css_enabled_makers = ['csslint']
"   " Available checkers: flake8 pep257 pep8 pyflakes pylama pylint python vulture py3kwarn
"   " To run checker manually use :Neomake vulture
"   " let g:neomake_python_enabled_makers = ['pep257', 'flake8', 'mypy']
"   let g:neomake_python_enabled_makers = ['flake8', 'mypy']
"   let g:neomake_open_list = 2
"   "let g:neomake_python_enabled_makers = ['python', 'flake8', 'frosted', 'pylint', 'pep257']
"   autocmd! BufWritePost * Neomake
" else
"   " Syntastic
"   Plug 'scrooloose/syntastic'
"   " It places errors into local error list which can be viewed with :Errors
"   " With unimpaired plugin you can move to the next / prev error with ]l / [l
"   "
"   " PHP - PHPCS
"   " set default standard for phpcs: sudo phpcs --config-set default_standard PSR2
"   " it is also possible to configure options for each checker, see
"   " syntastic helt - "syntastic-config-makeprg"
"   let g:syntastic_check_on_open=0
"   let g:syntastic_css_checkers = ['csslint']
"   let g:syntastic_javascript_checkers = ['eslint', 'flow', 'jshint']
"   " Available checkers: flake8 pep257 pep8 pyflakes pylint python
"   let g:syntastic_python_checkers = ['python', 'flake8']
" endif


  " Clean and elegant distraction-free writing for NeoVim.
  " :TZMinimalist - Minimalist mode. Activates/deactivates NeoVim's UI
  "                 components from the left, bottom and top.
  " :TZFocus toggles Focus mode. Maximizes/minimizes the current window.
  " :TZAtaraxis toggles Ataraxis - "super" minimalist mode.
  " Has parameters to set the padding: :TZAtaraxis l10 r10 t3 b1
  Plug 'Pocco81/TrueZen.nvim'

    " This plugin just disables h/j/k/l, arrows, +/-, gj/gk/gl/gh, PgUp/PgDown
    " Plug 'wikitopian/hardmode'
    " autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()
    "
    " Just disable 'j', I use it too often
    "nmap j <nop>
    "
    " This plugin disables repeated use of h/j/k/l and others
    " Hard mode - no jjjjj and kkkkk, :HardTimeToggle to toggle
    " let g:hardtime_allow_different_key = 1
    " let g:list_of_normal_keys = ["h", "j", "k", "l"]
    " let g:list_of_visual_keys = ["h", "j", "k", "l"]
    " Plug 'takac/vim-hardtime'
    " let g:hardtime_default_on = 1
    "
    " This one, like vim-hardtime, only disables repeated use.
    " Disable repeated character-wise movements
    " Use: word motions: w, b, e, ge / W, B, E, gE
    "      char search: f, t, F, T and ; / ,
    "      line start/end: 0, $, ^ (non-blank start)
    "      ex commands: :8,15d - delete lines
    "                   :8,15co . - copy lines
    "                   :-5,-3co . with relative numbers
    "                   :8,15m . - move lines
    "      text objects: Vi{ to select a block in {}
    "      search: /forward or ?backward
    "      insert at start/end: I / A
    "      use by-block movements: { / }, [[ / ]], etc
    "      change list: g; / g, or gi to insert at last change position
    "      jump history: C-O / C-I
    "      matching pair jump: %
    "      line jumps: 50G to line 50 or 20j to 20 lines down
    " See: http://vimcasts.org/blog/2013/02/habit-breaking-habit-making/
    "      http://stackoverflow.com/questions/37059399/vim-motion-without-jk-and-hardmode-installed
    "      https://pbrisbin.com/posts/hard_mode/
    "      :help motion.txt
    " Plug 'kbarrette/mediummode'

    " Plug 'kshenoy/vim-signature'
    " Plug 'vim-scripts/ShowMarks'
    " let g:showmarks_textlower="\t"
    " let g:showmarks_textupper="\t"
    " let g:showmarks_textother="\t"

  """"""" File browser
  " Additional features for netrw
  "  -  to open browser focused on current file, - again to go upper
  "  .  to put selected file name to the end of command line;
  "  !  to do the same and start command line with !
  "  ~  go home; cd/cl - :cd / :lcd
  " Plug 'tpope/vim-vinegar'
  augroup MyAutoCmd
    "" use Leader-r to refresh (default is Ctrl-L which is used to jump
    "" to the left window)
    autocmd FileType netrw nnoremap <buffer> <Leader>r <Plug>NetrwRefresh
  augroup END

  " :ConqueTerm bash
  " :ConqueTerm mysql -h localhost -u joe -p sock_collection
  " :ConqueTerm ipython
  " Note: to open file use 'gf'
  Plug 'lrvick/Conque-Shell'
  
  " :Gitv - git history viewer
  " Plug 'gregsexton/gitv'
  " :Extradite - git browser
  " Plug 'int3/vim-extradite'
  " Merge tool, see http://sjl.bitbucket.org/splice.vim/
  " git setup:
  "  mergetool.splice.cmd=gvim -f $BASE $LOCAL $REMOTE $MERGED -c 'SpliceInit'
  "  mergetool.splice.trustexitcode=true
  " Splice commands are called via 'g:splice_previx' ('-' by default)
  Plug 'sjl/splice.vim'

  " Improves the commit buffer - splits into diff, edit, status.
  Plug 'rhysd/committia.vim'

  " -> https://github.com/vim-vdebug/vdebug
  " Plug 'joonty/vdebug'
  " Automatic ctags re-generator
" " Debugger {{{
"   "http://jaredforsyth.com/projects/vim-debug/
"   function! DebugWeb(url)
"     let g:vdebug_options['break_on_open'] = 1
"     let g:vdebug_options['continuous_mode'] = 1
"     let url = a:url
"     let http_pos = stridx(url, 'http')
"     if http_pos != 0
"       let url = 'http://'.url
"     endif
"     let q_pos = stridx(url, '?')
"     if q_pos == -1
"       let url = url.'?XDEBUG_SESSION_START=vim_debug'
"     else
"       let url = url.'&XDEBUG_SESSION_START=vim_debug'
"     endif
"     exec "!xdg-open '".url."'"
"     python debugger.run()
"   endfunction
"   " example:
"   "   :Debug localsite.com
"   command! -nargs=1 DebugWeb call DebugWeb('<args>')
" 
"   function! DebugPy(...)
"     let g:vdebug_options['break_on_open'] = 1
"     let g:vdebug_options['continuous_mode'] = 0
"     let str_args = join(a:000, ' ')
"     "with -S it doesn't work in virtual env
"     "let last_cmd = '!python -S ~/pydbgp/bin/pydbgp -d localhost:9000 -k vim_debug ' . str_args
"     let last_cmd = '!python ~/pydbgp/bin/pydbgp -d localhost:9000 -k vim_debug ' . str_args
"     execute 'silent !echo "' . str_args . '" > ~/vim.last.arg.txt &'
"     execute 'silent !echo "' . last_cmd . '" > ~/vim.last.cmd.txt &'
"     execute 'silent ' . last_cmd . ' > ~/vim.last.out.txt 2> ~/vim.last.err.txt &'
"     python debugger.run()
"   endfunction
"   " python debugging requires pydbgp
"   " download from http://code.activestate.com/komodo/remotedebugging/ (version 7.1.3 works)
"   " example (open test file first):
"   "   :DebugPy -c tests/acceptance/selenuim/dev.cfg
"   command! -nargs=* -complete=file DebugPy call DebugPy('% <args>')
" 
"   function! DebugPhp(command, ...)
"     let g:vdebug_options['break_on_open'] = 1
"     let g:vdebug_options['continuous_mode'] = 0
"     let str_args = join(a:000, ' ')
"     let last_cmd = '!export XDEBUG_CONFIG="idekey=vim_debug" && sleep 2 && ' . a:command . ' ' . str_args
"     execute 'silent !echo "' . str_args . '" > ~/vim.last.arg.txt &'
"     execute 'silent !echo "' . last_cmd . '" > ~/vim.last.cmd.txt &'
"     execute 'silent ' . last_cmd . ' > ~/vim.last.out.txt 2> ~/vim.last.err.txt &'
"     python debugger.run()
"   endfunction
" 
"   " example (runtests.sh invokes phpunit):
"   "   :DebugPhp wordpress-tests/runtests.sh --filter test_export_book_new --bootstrap wordpress-tests/bootstrap.php %
"   command! -nargs=* -complete=file DebugPhp call DebugPhp('<args>')
"   "command! -nargs=* -complete=file DebugPhpTemp call DebugPhpTemp('<args>')
"   " example (open test file first):
"   "   :DebugPhpunit --bootstrap tests/unitTests/bootstrap.php
"   command! -nargs=* -complete=file DebugPhpunit call DebugPhp('phpunit', '<args> %')
"   " example (open test file first):
"   "   :DebugPhpScript %
"   command! -nargs=* -complete=file DebugPhpScript call DebugPhp('php', '<args>')
"   " example
"   "   :DebugPhpConsole appadd appto.tests@gmail.com "{\"platform\": {\"app\": ...}}"
"   command! -nargs=* DebugYiiConsole call DebugPhp('console/yiic', '<args>')
" 
"   let g:vdebug_options = {
"   \    "timeout" : 200,
"   \    "break_on_open" : 0,
"   \    "ide_key" : 'vim_debug',
"   \    "continuous_mode" : 1,
"   \    "auto_start" : 1,
"   \}
"   let g:vdebug_keymap = {
"   \    "run" : "<F5>",
"   \    "run_to_cursor" : "<F9>",
"   \    "step_over" : "<F8>",
"   \    "step_into" : "<F7>",
"   \    "step_out" : "<F4>",
"   \    "close" : "<F6>",
"   \    "detach" : "<F11>",
"   \    "set_breakpoint" : "<F12>",
"   \    "get_context" : "<F10>",
"   \    "eval_under_cursor" : "<F3>",
"   \}
" 
" " }}}

""" Built-in command improvements
"
" :QFdo - quickfix do - run a command over quckfix files, see also :LLdo for location list
" :BufTypeDo, :BufMatchDo - run a command over buffers of specified type or
"    buffers with name matching the pattern
" :View command -> command result to split buffer, like :View ilist vim
"    or :View map x
" Alternative is to use 'redir' command:
"   :redir >name_of_registers_file
"   :registers
"   :redir END
"   :r name_of_registers_file
" OR:
"   :redir => m | silent registers | redir END | put=m
" See
"   :help redir
" :Collect register-or-var command -> command result to register or var
"  Collect('reg-or-var command') - similar as function
" :GCollect - returns a list of lines for :g/pattern/, see also :GCCollect
" :MyMaps - active maps into the new buffer
" :Filter - like interactive :g/re/p - modifies the buffer! - leaves only matching lines in a buffer
" z=, [I, g] - overlay for spell suggestions, search results, tag search results
" Scall (script, function, arg) - call local function from script
" nnoremap q[I <plug>vimple_ident_search<bs>
" nnoremap q]I <plug>vimple_ident_search_forward
" " rempap to avoid conflict
" inoremap vjj <plug>vimple_completers_trigger
" Plug 'dahu/Vimple'


" Gundo.vim is Vim plugin to visualize your Vim undo tree.
" Plug 'sjl/gundo.vim'
" Similar: Plug 'mbbill/undotree'

" HTTP client
" Example:
" # Second request.
" # :foo = bar
" POST http://httpbin.org/post
" {
"   "data": ":foo",
"   "otherkey": "hello"
" }
" <Leader>tt to run the request
" Similar: Plug 'nicwest/QQ.vim'
" Plug 'aquach/vim-http-client'

Plug '~/.vim/bundle/potion'

" On search automatically prints "At match #N out of M matches".
" Plug 'henrik/vim-indexed-search'

" autosession.vim settings
" noremap <Leader>s :SessionList<CR>
" default: blank,buffers,curdir,folds,help,options,tabpages,winsize"
" let g:debug_autosession = 0
" let g:debug_autosession_file = '~/vim.autosession.log'
" let g:autosession_load_after = 'LoadLocalVimrc()'
" Note: to debug Vim error on exit, run it with -V9errorlog
"       and all messages will be saved to errorlog

" Mini-plugin to auto-save and restore last session
" Good when you have 1 project, not convenient for multiple
" projects.
"
" let s:session_loaded = 1
" augroup autosession
"   " load last session on start
"   " Note: without 'nested' filetypes are not restored.
"   autocmd VimEnter * nested call s:session_vim_enter()
"   autocmd VimLeavePre * call s:session_vim_leave()
" augroup END

" function! s:session_vim_enter()
"     if bufnr('$') == 1 && bufname('%') == '' && !&mod && getline(1, '$') == ['']
"         execute 'silent source ~/.vim/sessions/lastsession.vim'
"     else
"       let s:session_loaded = 0
"     endif
" endfunction

" function! s:session_vim_leave()
"   if s:session_loaded == 1
"     let sessionoptions = &sessionoptions
"     try
"         set sessionoptions-=options
"         set sessionoptions+=tabpages
"         execute 'mksession! ~/.vim/sessions/lastsession.vim'
"     finally
"         let &sessionoptions = sessionoptions
"     endtry
"   endif
" endfunction

" Disabled {{{
  " adopt color schemes for terminal
  " Plug 'godlygeek/csapprox'
  "
  " better search hightlights
  " Plug 'haya14busa/incsearch.vim'
  " " Similar: https://github.com/junegunn/vim-oblique/
  " " Similar: https://github.com/dahu/SearchParty
  " " Similar: 'osyo-manga/vim-over' - highlighs in cmd win (Ctrl-f in cmd
  " mode) and has own :OverCommandLine where it also shows replace preview
  " ---
  " Usage:
  " - just search to see the incremental matches highlight
  " - Tab / S-Tab to go forward/backward between results
  " - automatically disables highlight when you move the cursor with
  "   non-search related movements (just do j or k when search is active to
  "   disable highlight)
  " map /  <Plug>(incsearch-forward)\v
  " map ?  <Plug>(incsearch-backward)\v
  " " Search, but don't move the cursor (usually moves to the first match)
  " map g/ <Plug>(incsearch-stay)
  " " Setup for vim-indexed-search
  " " See: https://github.com/haya14busa/incsearch.vim/issues/21
  " let g:indexed_search_mappings = 0
  " augroup incsearch-indexed
  "   autocmd!
  "   autocmd User IncSearchLeave ShowSearchIndex
  " augroup END
  " nnoremap <silent>n nzv:ShowSearchIndex<CR>
  " nnoremap <silent>N Nzv:ShowSearchIndex<CR>
  " "set hlsearch
  " let g:incsearch#auto_nohlsearch = 1
  " map n  <Plug>(incsearch-nohl-n)zv:ShowSearchIndex<CR>
  " map N  <Plug>(incsearch-nohl-N)zv:ShowSearchIndex<CR>
  " map *  <Plug>(incsearch-nohl-*)
  " map #  <Plug>(incsearch-nohl-#)
  " map g* <Plug>(incsearch-nohl-g*)
  " map g# <Plug>(incsearch-nohl-g#)

  " :Multichange to enter multichange mode (cw will affect the whole file)
  " Plug 'AndrewRadev/multichange.vim'
  " disable mapping entirely
  " let g:multichange_mapping = ''

  " highlight matching surronding pairs ({ }, ( ), etc)
  "Plug 'Yggdroot/hiPairs'
  " :DoMatchParen
  "
  " Semantic highlighting
  " See: http://www.reddit.com/r/vim/comments/23qy7j/semantic_highlighting/
  "      https://medium.com/@evnbr/coding-in-color-3a6db2743a1e
  "      http://stackoverflow.com/questions/21425279/is-there-a-vim-plugin-for-semantics-syntax-highlighting
  "      http://stackoverflow.com/questions/21383532/vim-variable-syntax-highlighting
  "      https://github.com/bigfish/vim-js-context-coloring
  "      https://plus.google.com/+DouglasCrockfordEsq/posts/FzKnHk96m2C
  "
  " :SemanticHighlightToggle - on/off
  " Plug 'jaxbot/semantic-highlight.vim'
  "
  " Vim / tmux splits integration
  " <ctrl-h> => Left
  " <ctrl-j> => Down
  " <ctrl-k> => Up
  " <ctrl-l> => Right
  " <ctrl-\> => Previous split
  " Plug 'christoomey/vim-tmux-navigator'
  ":Tmux lets you call any old tmux command (with really good tab complete).
  ":Tyank and :Tput give you direct access to tmux buffers.
  ":Twrite sends a chunk of text to another pane. Give an argument like windowtitle.2, top-right, or last, or let it default to the previously given argument.
  ":Tattach lets you use a specific tmux session from outside of it.
  " Plug 'tpope/vim-tbone'
  "
  " Note: compare with tbone - :Twrite 1.2 also sends text to another
  "       tmux pane
  " Repl for vim
  " Ctrl-c c - run code in other tmux pane (set :1.2 for win 1 pane 2)
  " See: http://vimeo.com/34184155 and https://technotales.wordpress.com/2007/10/03/like-slime-for-vim/
  " Can be used for anything: python, node, bash, mysql, etc
  "Plug 'jpalardy/vim-slime'
  "let g:slime_target = "tmux"
  "let g:slime_python_ipython = 1
  "
  " Similar: https://github.com/krisajenkins/vim-pipe
  "
  " Create and format tables (including formulas)
  " Plug 'dhruvasagar/vim-table-mode'
  "
  " Search in column, arrange column, delete column, move, sum and much more
  " Plug 'chrisbra/csv.vim'
  "
  "
  " Highlight yanked text
  " see  http://stackoverflow.com/questions/26069278/hightlight-copied-area-on-vim
  " Lets user define their own operators.
  " Plug 'kana/vim-operator-user'
  " Operator to do two or more operators.
  " Plug 'thinca/vim-operator-sequence'
  " Highlight yanked text
  " Plug 'osyo-manga/vim-operator-highlight'
  " let g:operator#highlight#clear_time=2.0
  " noremap <expr> <Plug>(yank-highlight) operator#sequence#map("y", "\<Plug>(operator-highlight)")
  " nmap yc <Plug>(yank-highlight)
  " vmap yc <Plug>(yank-highlight)
" }}}
"
