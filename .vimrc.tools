" Manage files and directories in vim
" :Vimdir [directory] - To list files and folders
" :VimdirR [directory] - To list files and folders recursive
" Then change file names, dd to delete and save buffer to apply changes
Plug 'c0r73x/vimdir.vim'
" Similar: vidir from moreutils (https://joeyh.name/code/moreutils/)
" Similar: Plug 'idbrii/renamer.vim'

" Find the shortest motion sequence or search query to move the cursor
" :PathfinderExplain - explain a suggestion
" If you set g:pf_autorun_delay to a negative value, you get two commands instead:
" :PathfinderBegin: Set the start position. This still happens automatically when switching windows/tabs, or loading a new file.
" :PathfinderRun: Set the target position and get a suggestion.
" if has('python3') && has('timers')
"   Plug 'danth/pathfinder.vim'
" else
"   echoerr 'pathfinder.vim is not supported on this Vim installation'
" endif

" Requires Nvim 0.5, can be run via docker:
" docker run -it --rm brandoncc/vim-be-good:stable
" Vim games, :VimBeGood
" Plug 'ThePrimeagen/vim-be-good'

Plug 'jamessan/vim-gnupg'

Plug 'Shougo/vimproc'
Plug 'Shougo/vimshell.vim'

" Wakatime
" https://wakatime.com
" Plug 'wakatime/vim-wakatime'

" Open files from terminal buffer in current nvim instance.
" Plug 'willothy/flatten.nvim'
" g:unception_open_buffer_in_new_tab = 1
" Note: we can get back to terminal after opening the file with Ctrl-O
Plug 'samjwill/nvim-unception'

if has('nvim')
  " terminal scrollback buffer size
  " set scrollback=100000

  " Open terminal with ":term" or ":term ipython" (to run the specific command).
  " Create the new split and enter / edit the commands there, send to
  " terminal with "Enter" (current line or visual selection).
  function! SendCommand(commands) abort
    " Send the command to the first terminal buffer found in current tab.
    " If there is no terminal - splits the current window and runs terminal
    " there.
    let commands = a:commands

    let term_buffer_id = -1
    let term_job_id = 0
    for visible_buffer_id in tabpagebuflist()
      try
          let term_job_id = nvim_buf_get_var(visible_buffer_id, 'terminal_job_id')
          let term_buffer_id = visible_buffer_id
          break
      catch
          let term_job_id = 0
      endtry
    endfor

    if term_job_id == 0
      new
      let term_job_id = termopen($SHELL)
    endif

    call jobsend(term_job_id, add(commands, ''))
  endfunction

  function! SendCommandCurrentLine()
      " Send current line to terminal buffer.
      call SendCommand([getline('.')])
  endfunction

  function! GetVisualSelection()
      " Returns visual selection as list of lines.
      " See https://stackoverflow.com/a/6271254/4612064
      let [line_start, column_start] = getpos("'<")[1:2]
      let [line_end, column_end] = getpos("'>")[1:2]
      let lines = getline(line_start, line_end)
      if len(lines) == 0
          return []
      endif
      let lines[-1] = lines[-1][: column_end - 2]
      let lines[0] = lines[0][column_start - 1:]
      return lines
  endfunction

  function! SendCommandVisualSelection()
      call SendCommand(GetVisualSelection())
  endfunction

  function! SendCommandVisualSelectionAsLine()
      call SendCommand([join(GetVisualSelection(), " ")])
  endfunction

  " <CR> is mapped to folds open / close by default
  " to enable term mappings, do :SetupTerm before using them
  " autocmd FileType c,cpp,php,python,javascript,sql,sh nnoremap <buffer> <CR> :<C-u>call SendCommandCurrentLine()<CR>
  " autocmd FileType c,cpp,php,python,javascript,sql,sh xnoremap <buffer> <CR> :<C-u>call SendCommandVisualSelection()<CR>
  " " Useful in ipdb where multi-line input is not supported, this mapping can
  " " be used to send multi-line statement,
  " " see also discussion here https://github.com/randy3k/SendCode/issues/39,
  " " this is what they call "fake multi-line" mode:
  " autocmd FileType c,cpp,php,python,javascript,sql xnoremap <buffer> <leader><CR> :<C-u>call SendCommandVisualSelectionAsLine()<CR>

  " Do :SetupTerm to enable terminal mappings for "Enter" (used for folds by
  " default)
  function! SetupTermMappings()
    nnoremap <buffer> <CR> :<C-u>call SendCommandCurrentLine()<CR>
    xnoremap <buffer> <CR> :<C-u>call SendCommandVisualSelection()<CR>
    " Useful in ipdb where multi-line input is not supported, this mapping can
    " be used to send multi-line statement,
    " see also discussion here https://github.com/randy3k/SendCode/issues/39,
    " this is what they call "fake multi-line" mode:
    xnoremap <buffer> <leader><CR> :<C-u>call SendCommandVisualSelectionAsLine()<CR>
  endfunction
  command! TermSetup :call SetupTermMappings()

endif

" Filebrowser
" '-' to open it and to go up dir
" R - refresh;
" f - define the filter for filenames; F - toggle filter;
" gh - toggle hide/show wildeignored files
" <BS> - go back in dirs history
" q - close
" ~ - go home
" + / % - create file
" :ClipPathname / :ClipDirname - copy the full path of the selected file / current dir
" Plug 'jeetsukumaran/vim-filebeagle'
" let g:filebeagle_suppress_keymaps = 1
" let g:filebeagle_show_hidden = 1
" let g:filebeagle_check_gitignore = 1
" " map <silent> <Leader>f  <Plug>FileBeagleOpenCurrentWorkingDir
" map <silent> -          <Plug>FileBeagleOpenCurrentBufferDir

" using vim-plug
" Plug 'mcchrish/nnn.vim'

" Dirvish
"
" The '-' mapping is default: open current file dir,
" in file browser goes up one dir.
"
" The filebrowser buffer is editable, but changes are not
" saved. Refresh with R.
"
" File operations can be done with :Shdo, use '.' mapping
" in filebrowser to stat the :Shdo command.
" In the Shdo buffer - edit the shell script and apply with Z!.
"
" For example: select files, then :Shdo mv {} {} - rename files.
" Also '%' represents the current directory, so
" :edit %/new_file.txt in command line will create a new file.
Plug 'justinmk/vim-dirvish'
" Show directories at the top
let g:dirvish_mode = ':sort ,^.*[\/],'
" How to expand a directory inline (like a tree-style view)?  
" There is a hacky solution. Put this in your vimrc and hit "t" on a directory:  

augroup dirvish_config
  autocmd!
  autocmd FileType dirvish
              \ nnoremap <silent><buffer> t ddO<Esc>:let @"=substitute(@", '\n', '', 'g')<CR>:r ! find "<C-R>"" -maxdepth 1 -print0 \| xargs -0 ls -Fd<CR>:silent! keeppatterns %s/\/\//\//g<CR>:silent! keeppatterns %s/[^a-zA-Z0-9\/]$//g<CR>:silent! keeppatterns g/^$/d<CR>:noh<CR>
augroup END

" Extra commands on top of dirvish
" Create file	a	<Plug>(dovish_create_file)
" Create directory	A	<Plug>(dovish_create_directory)
" Delete under cursor	dd	<Plug>(dovish_delete)
" Rename under cursor	r	<Plug>(dovish_rename)
" Yank under cursor (or visual selection)	yy	<Plug>(dovish_yank)
" Copy file to current directory	pp	<Plug>(dovish_copy)
" Move file to current directory	PP	<Plug>(dovish_move)
Plug 'roginfarrer/vim-dirvish-dovish', {'branch': 'main'}

" let g:broot_default_conf_path = $HOME . '/.config/broot/conf.hjson'
" Plug 'lstwn/broot.vim'
" map <silent> - :BrootCurrentDir<CR>
" noremap <Leader>f :BrootWorkingDir<CR>

" Suggest to open existing file instead of creating new one when there
" are multiple matches
"   allow using fzf
let g:dym_use_fzf = 1
Plug 'EinfachToll/DidYouMean'

" Ensure dir exists before save the file
" :e some_new_dir/some_new_file and then :w will work
Plug 'dockyard/vim-easydir'

" Auto CD to project root
" Plug 'airblade/vim-rooter'
" disables certain vim features to speedup large file editing
" g:LargeFile (by default, its 100) - 100Mb
Plug 'vim-scripts/LargeFile'

"""""" Commands
"Vim sugar for the UNIX shell commands that need it the most. Commands
"include:
" :Unlink: Delete a buffer and the file on disk simultaneously.
" :Remove: Like :Unlink, but doesn't require a neckbeard.
" :Move: Rename a buffer and the file on disk simultaneously.
" :Chmod: Change the permissions of the current file.
" :Find: Run find and load the results into the quickfix list.
" :Locate: Run locate and load the results into the quickfix list.
" :SudoWrite: Write a privileged file with sudo.
" :W: Write every open window. Handy for kicking off tools like guard.
Plug 'tpope/vim-eunuch'

" Password generator, :echo Password() or Ctrl-R=Password()
function! RandNum() abort
  return str2nr(matchstr(reltimestr(reltime()), '\.\zs\d*'))
endfunction

function! RandChar() abort
  return nr2char((RandNum() % 93) + 33)
endfunction

function! Password() abort
  return join(map(range(8), 'RandChar()'), '')
endfunction
