" FZF setup
"
" There is very annoying issue with fzf - when you select file and buffer stays in some
" strange state, where almost anything closes the buffer and some
" actions like attempt to search text deletes part of buffer without undo
" Issue is not stable, it is often reproduced when you start work with vim,
" but then it disappears and it start work normally, not sure why
" So for now keep ctrlp enabled for main mappings
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Show FZF suggestions inside the active window instead of creating separate one (default).
let g:fzf_layout = { 'window': 'enew' }

" command! -bang -nargs=? -complete=dir HFiles
"   \ call fzf#vim#files(<q-args>, {'source': 'ag --hidden --ignore .git -g ""'}, <bang>0)
command! -bang -nargs=? -complete=dir HFiles
  \ call fzf#vim#files(<q-args>, {'source': 'rg . -l --hidden --iglob "!.git" -g ""'}, <bang>0)

noremap <Leader>f :HFiles<CR>
" noremap <Leader>f :FZF<CR>
" noremap <Leader>t :Tags<CR>
" inoremap <Leader>l :Lines<CR>
"
noremap <Leader>fm :History<CR>
noremap <Leader>fb :Buffers<CR>

" Complete lines with FZF
imap <c-x><c-l> <plug>(fzf-complete-line)

" Search across all files
" noremap <Leader>a :Ag<CR>

" Files [PATH]    Files (similar to :FZF)
" GFiles [OPTS]   Git files (git ls-files)
" GFiles? Git files (git status)
" Buffers Open buffers
" Colors  Color schemes
" Ag [PATTERN]    ag search result (ALT-A to select all, ALT-D to deselect all)
" Lines [QUERY]   Lines in loaded buffers
" BLines [QUERY]  Lines in the current buffer
" Tags [QUERY]    Tags in the project (ctags -R)
" BTags [QUERY]   Tags in the current buffer
" Marks   Marks
" Windows Windows
" Locate PATTERN  locate command output
" History v:oldfiles and open buffers
" History:    Command history
" History/    Search history
" Snippets    Snippets (UltiSnips)
" Commits Git commits (requires fugitive.vim)
" BCommits    Git commits for the current buffer
" Commands    Commands
" Maps    Normal mode mappings
" Helptags    Help tags 1
" Filetypes   File types

" " See also: https://github.com/junegunn/fzf/wiki/examples
" " See also: https://github.com/D630/fzf-contrib
" " Similar: https://github.com/garybernhardt/selecta

" Most recent files menu.
" command! FZFMru call fzf#run({
"           \'source': NeomruHistory(),
"           \'sink' : 'e ',
"           \'options' : '-m',
"           \})
" function! NeomruHistory()
"     return "sed '1d' " . $HOME . "/.vim/tmp/cache/neomru/file"
"     "return "ag -i " . a:l . " | sed 's@\\(.[^:]*\\):\\(.[^:]*\\):\\(.*\\)@\\3:\\2:\\1@' "
" endfunction
" noremap <Leader>fm :FZFMru<CR>

" FZY setup

" " Related: https://github.com/cloudhead/neovim-fuzzy/tree/master
" " Plug 'cloudhead/neovim-fuzzy'

" " See https://github.com/jhawthorn/fzy/issues/64
" if has('nvim')
"     function! FzyCommand(choice_command, vim_command) abort
"         let l:callback = {
"                     \ 'window_id': win_getid(),
"                     \ 'filename': tempname(),
"                     \  'vim_command':  a:vim_command
"                     \ }
"         function! l:callback.on_exit(job_id, data, event) abort
"             bdelete!
"             call win_gotoid(self.window_id)
"             if filereadable(self.filename)
"                 try
"                     let l:selected_filename = readfile(self.filename)[0]
"                     exec self.vim_command . ' ' . l:selected_filename
"                 catch /E684/
"                 endtry
"             endif
"             call delete(self.filename)
"         endfunction
"         botright 10 new
"         let l:term_command = a:choice_command . ' | fzy > ' .  l:callback.filename
"         silent call termopen(l:term_command, l:callback)
"         setlocal nonumber norelativenumber
"         startinsert
"     endfunction

"     function! FzyCommandForLines(lines, vim_command) abort
"         let l:callback = {
"                     \ 'window_id': win_getid(),
"                     \ 'filename': tempname(),
"                     \  'vim_command':  a:vim_command
"                     \ }
"         function! l:callback.on_exit(job_id, data, event) abort
"             bdelete!
"             call win_gotoid(self.window_id)
"             if filereadable(self.filename)
"                 try
"                     let l:selected_filename = readfile(self.filename)[0]
"                     exec self.vim_command . ' ' . l:selected_filename
"                 catch /E684/
"                 endtry
"             endif
"             call delete(self.filename)
"         endfunction
"         botright 10 new
"         let l:term_command = 'fzy > ' .  l:callback.filename
"         silent call termopen(l:term_command, l:callback)
"         setlocal nonumber norelativenumber
"         startinsert
"     endfunction
" else
"     function! FzyCommand(choice_command, vim_command)
"         try
"             let output = system(a:choice_command . " | fzy ")
"         catch /Vim:Interrupt/
"             " Swallow errors from ^C, allow redraw! below
"         endtry
"         redraw!
"         if v:shell_error == 0 && !empty(output)
"             exec a:vim_command . ' ' . output
"         endif
"     endfunction
" endif

" " nnoremap <leader>e :call FzyCommand("find . -type f", ":e")<cr>
" " nnoremap <leader>f :call FzyCommand("ag . --silent -l -g ''", ":e")<cr>
" " nnoremap <C-p> :call FzyCommand("git ls-files --cached --modified \| sort \| uniq", ":e")<cr>

" " '-.' - search hidden files
" " '--igolb '!.*' - but ignore .git folder
" nnoremap <leader>f :call FzyCommand("rg . -l -. --iglob '!.git' -g ''", ":e")<cr>
" nnoremap <LocalLeader>i :call FzyCommand(join(getline(1, '$'), "\n"), "fzy", "/\\V")<cr>

