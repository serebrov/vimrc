" Prettier and language-server / language-client setup, linters

Plug 'tpope/vim-dispatch'

if has('nvim')

  " Better display for messages
  set cmdheight=2
  " Smaller updatetime for CursorHold & CursorHoldI
  set updatetime=300
  " don't give |ins-completion-menu| messages.
  set shortmess+=c
  " always show signcolumns
  set signcolumn=yes

  " Disable in favor of nvim LSP client and nvim-lspconfig
  " source ~/.vim/.vimrc.ide.coc

  "" LSP Support, see VonHeikemen/lsp-zero.nvim
  " LSP client configurations
  " :LspInfo - see diagnostics
  " :LspStart <config_name> Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass autostart = false to your .setup{} call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype.
  " :LspStop <client_id> Defaults to stopping all buffer clients.
  " :LspRestart <client_id> Defaults to restarting all buffer clients.
  Plug 'neovim/nvim-lspconfig'
  " Installer for language servers
  ":Mason - opens a graphical status window
  " :MasonUpdate - updates all managed registries
  " :MasonInstall <package> ... - installs/re-installs the provided packages
  " :MasonUninstall <package> ... - uninstalls the provided packages
  " :MasonUninstallAll - uninstalls all packages
  " :MasonLog - opens the mason.nvim log file in a new tab window
  Plug 'williamboman/mason.nvim', {'do': ':MasonUpdate'}
  " :LspInstall [<server>...] - installs the provided servers
  " :LspUninstall <server> ... - uninstalls the provided servers
  "
  " :LspInstall bashls jsonls vuels htm pyright tsserver vimls
  Plug 'williamboman/mason-lspconfig.nvim'               " Optional

  " Autocompletion
  Plug 'hrsh7th/nvim-cmp'     " Required
  Plug 'hrsh7th/cmp-nvim-lsp' " Required
  Plug 'L3MON4D3/LuaSnip'     " Required

  " Configures lsp-related staff, default keys
  " K: Displays hover information about the symbol under the cursor in a floating window. See :help vim.lsp.buf.hover().
  " [d: Move to the previous diagnostic in the current buffer. See :help vim.diagnostic.goto_prev().
  " ]d: Move to the next diagnostic. See :help vim.diagnostic.goto_next().
  " <C-W>d (and <C-W><C-D>) in Normal mode map to vim.diagnostic.open_float(). Use this to view information about any diagnostics under the cursor in a floating window.
  " gd: Jumps to the definition of the symbol under the cursor. See :help vim.lsp.buf.definition().
  " gD: Jumps to the declaration of the symbol under the cursor. Some servers don't implement this feature. See :help vim.lsp.buf.declaration().
  " gI: Lists all the implementations for the symbol under the cursor in the quickfix window. See :help vim.lsp.buf.implementation().
  " note: default mapping is gi, remapped to gI in .vimrc.ide.lsp.lua
  " go: Jumps to the definition of the type of the symbol under the cursor. See :help vim.lsp.buf.type_definition().
  " gr: Lists all the references to the symbol under the cursor in the quickfix window. See :help vim.lsp.buf.references().
  " gs: Displays signature information about the symbol under the cursor in a floating window. See :help vim.lsp.buf.signature_help(). If a mapping already exists for this key this function is not bound.
  " <F2>: Renames all references to the symbol under the cursor. See :help vim.lsp.buf.rename().
  " <F3>: Format code in current buffer. See :help vim.lsp.buf.format().
  " <F4>: Selects a code action available at the current cursor position. See :help vim.lsp.buf.code_action().
  " gl: Show diagnostics in a floating window. See :help vim.diagnostic.open_float().
  Plug 'VonHeikemen/lsp-zero.nvim', {'branch': 'v3.x'}

  " Install languages with :TSInstall
  " :TSInstall typescript lua markdown
  " List of avaiable and installed languages :TSInstallInfo
  " :TSUpdate to update installed parsers
  " :TSEnable / :TSDisable to enable/disable parsers
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

  " Textobjects for functions, classes, etc.
  " See config in .vimrc.ide.lsp.lua
  " af, if - outer/inner function
  " ac, ic - outer/inner class
  " as - scope
  "
  " Allows moving arguments (similar to the sideways plugin)
  " <leader>ll and <leader>hh to move a function argument left or right
  "
  " Jump to method or class (overrides vim standard mappings)
  " ]m - next method, [m - previous
  " ]M - outer method, [M - previous
  " ]] - next class, [[ - previous
  " ][ - outer class, [] - previous
  " ]o - next loop
  " ]s - next scope
  " ]z - next fold
  " ]d - next conditional, [d - previous
  Plug 'nvim-treesitter/nvim-treesitter-textobjects'

  " Use treesitter to autoclose and autorename html tag.
  " Works with html,tsx,vue,svelte,php.
  " Note: does not work if tag has properties,
  "   <div class="xxx">...</div>
  " Changing opening div does nothing (but changing
  " closing div works).
  Plug 'windwp/nvim-ts-autotag'

  " Plug 'nvim-lua/plenary.nvim'
 
  " Vista	Open/Close vista window for viewing tags or LSP symbols
  " Vista!	Close vista view window if already opened
  " Vista!!	Toggle vista view window
  " Plug 'liuchengxu/vista.vim'
  " let g:vista_default_executive = 'nvim_lsp'
  " let g:vista_close_on_jump = 1
  " let g:vista_echo_cursor_strategy = 'floating_win'

"  nnoremap <silent> <Leader>v :Vista!!<CR>
"  nnoremap <silent> <Leader>vf :Vista finder fzf:nvim_lsp<CR>

"  function! NearestMethodOrFunction() abort
"    return get(b:, 'vista_nearest_method_or_function', '')
"  endfunction

"  set statusline+=%{NearestMethodOrFunction()}

"  " By default vista.vim never run if you don't call it explicitly.
"  "
"  " If you want to show the nearest function in your statusline automatically,
"  " you can add the following line to your vimrc
"  autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

  " Folding with treesitter.
  set foldexpr=nvim_treesitter#foldexpr()
  augroup treesitter_folding
      au!
      au FileType javascript setlocal foldmethod=expr
      au FileType typescript setlocal foldmethod=expr
      au FileType python setlocal foldmethod=expr
      au FileType vue setlocal foldmethod=expr
      au FileType markdown setlocal foldmethod=expr
  augroup END

  " Completions {{{
    "set completeopt=longest,menuone,preview " use a pop up menu for completions
    " set completeopt=menuone,longest,preview " use a pop up menu for completions
    set completeopt=menuone,noinsert,noselect
    set complete=""             " what use for completions
    set complete+=.             " current buffer
    set complete+=t             " tags
    set complete+=kspell        " dictionary
    set complete+=b             " other open buffers

  " Preview for substitute
  set inccommand=nosplit
endif

if has('nvim')
  " mkdir .virtualenvs
  " cd .virtualenvs
  " python -m venv debugpy
  " debugpy/bin/python -m pip install debugpy

  " Debug Adapter Protocol
  "
  " "raw" usage:
  " - :lua require('dap').set_breakpoint()
  " - :lua require('dap').continue()
  "
  " Run pytest for nearest function:
  " - :lua require('dap-python').test_method()
  "
  " Repl can be used to inspect variables and run commands (see >dap help in
  " repl).
  " - :lua require('dap').repl.open()
  "
  " Run frontend test (in the test file, vim lanched in the frontend folder):
  " - :lua require('dap').set_breakpoint()
  " - :lua require('dap').continue()
  " - :lua require('dap').repl.open()
  "
  Plug 'mfussenegger/nvim-dap'
  " Pyton adapter config and test runner.
  Plug 'mfussenegger/nvim-dap-python'

   " See config in .vimrc.dap.lua

   " Some example mappings:
   "    nnoremap <silent> <F5> :lua require'dap'.continue()<CR>
   "    nnoremap <silent> <F10> :lua require'dap'.step_over()<CR>
   "    nnoremap <silent> <F11> :lua require'dap'.step_into()<CR>
   "    nnoremap <silent> <F12> :lua require'dap'.step_out()<CR>
   "    nnoremap <silent> <leader>b :lua require'dap'.toggle_breakpoint()<CR>
   "    nnoremap <silent> <leader>B :lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>
   "    nnoremap <silent> <leader>lp :lua require'dap'.set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>
   "    nnoremap <silent> <leader>dr :lua require'dap'.repl.open()<CR>
   "    nnoremap <silent> <leader>dl :lua require'dap'.run_last()<CR>

  " Plugin 'rcarriga/nvim-dap-ui'
  " Plug 'theHamsta/nvim-dap-virtual-text'
endif

function! PreFormatPyJson()
  exe "s/\\vDecimal\\('(-?\\d+)'\\)/\\1/g | s/'/\"/g | s/u\"/\"/g | s/None/null/g | s/False/false/g | s/True/true/g | s/\\(\\d\\)L\\([},]\\)/\\1\\2/g"
endfunction

function! FormatPyJson()
  call PreFormatPyJson()
  exe "'<,'>!python -m json.tool"
endfunction

" Sort the whole file, no keys sorting
" python 2 version sorts by default, python 3 needs --sort-keys argument for
" that (we don't use it, so no sorting)
function! ReformatPyJson()
  exe "%!python3 -m json.tool"
endfunction

" let g:EditorConfig_exclude_patterns = ['fugitive://.*']
" Plug 'editorconfig/editorconfig-vim'

" Run :Prettier to format the file, release/1.x branch has plugins (php,
" python support)
let g:prettier#config#tab_width = '2'
let g:prettier#config#semi = 'false'
let g:prettier#config#single_quote = 'true'
let g:prettier#config#trailing_coma = 'all'
let g:prettier#config#allow_parens = 'always'

let g:prettier#config#print_width = '80'

Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
" Default mapping is <Leader>p, I use that for paste from system clipboard.
nmap <Leader><Leader>p <Plug>(Prettier)
let g:prettier#autoformat = 0
" This can be used to automatically format before save
" autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html Prettier
",*.css,*.less,*.scss
autocmd BufWritePre *.js,*.jsx,*.ts,*.tsx,*.vue,*.yaml,*.html Prettier

" Note: markdown can be formatted with :Prettier (for example,
" to format the markdown table, select it and run :Prettier)

function! RunBlackAndISort()
  silent :!black %
  silent :!isort %
  :e
endfunction
command! BlackAndSort :call RunBlackAndISort()

autocmd BufWritePost *.py execute ':BlackAndSort'
