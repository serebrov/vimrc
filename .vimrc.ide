" Prettier and language-server / language-client setup, linters
" Plugins for specific languages

" similar: https://github.com/xolox/vim-easytags
Plug 'joonty/vim-taggatron'

let test#strategy = {
  \ 'nearest': 'make',
  \ 'file':    'dispatch',
  \ 'suite':   'neovim',
\}
 
"# let g:test#javascript#jest#file_pattern = '\v(test|spec)\.(js|jsx|coffee|ts)$'
"# function! test#javascript#jest#test_file(file) abort
"#   return a:file =~# g:test#javascript#jest#file_pattern
"# endfunction

let test#javascript#runner = 'jest'
let test#javascript#jest#executable = 'npm run test:unit'
" let test#javascript#jest#executable = '../tools/local/frontend-cmd.sh npm run test:unit -- '
" let g:test#javascript#jest#options = ''
" let test#project_root = 'frontend' " projectroot#guess()

" function! TypeScriptTransform(cmd) abort
"   return substitute(a:cmd, '\v/(\S+)\.ts', '/\1.js', '')
" endfunction
" let g:test#custom_transformations          = {'typescript': function('TypeScriptTransform')}
" let g:test#transformation                  = 'typescript'

" Run tests from vim
" these "Ctrl mappings" work well when Caps Lock is mapped to Ctrl
" nmap <silent> t<C-n> :TestNearest<CR>
" nmap <silent> t<C-f> :TestFile<CR>
" nmap <silent> t<C-s> :TestSuite<CR>
" nmap <silent> t<C-l> :TestLast<CR>
" nmap <silent> t<C-g> :TestVisit<CR>
Plug 'vim-test/vim-test'
" Plug 'neomake/neomake'
Plug 'tpope/vim-dispatch'

" Taggatron {{{
augroup MyAutoCmdTags
  let g:tagcommands = {
  \    "python" : {
  \        "tagfile": ".python.tags",
  \         "args": "-R",
  \         "filesappend": "/**"
  \    },
  \    "php" : {
  \        "tagfile":".php.tags",
  \        "args":"-R",
  \        "filesappend": "/**"
  \    },
  \    "javascript" : {
  \        "tagfile":".js.tags",
  \        "args":"-R --exclude=node_modules --exclude=*.min.js --exclude=*-min.js",
  \        "filesappend": "/**"
  \    }
  \}
  let g:taggatron_verbose=0
  autocmd MyAutoCmdTags FileType php call taggatron#SetTags(".php.tags")
  autocmd MyAutoCmdTags FileType python call taggatron#SetTags(".python.tags")
  autocmd MyAutoCmdTags FileType javascript call taggatron#SetTags(".js.tags")
augroup END

  " todo: check http://tbaggery.com/2011/08/08/effortless-ctags-with-git.html
  "       and https://github.com/tpope/vim-fugitive/issues/104

" }}}

function! PreFormatPyJson()
  exe "s/\\vDecimal\\('(-?\\d+)'\\)/\\1/g | s/'/\"/g | s/u\"/\"/g | s/None/null/g | s/False/false/g | s/True/true/g | s/\\(\\d\\)L\\([},]\\)/\\1\\2/g"
endfunction

function! FormatPyJson()
  call PreFormatPyJson()
  exe "'<,'>!python -m json.tool"
endfunction

" Sort the whole file, no keys sorting
" python 2 version sorts by default, python 3 needs --sort-keys argument for
" that (we don't use it, so no sorting)
function! ReformatPyJson()
  exe "%!python3 -m json.tool"
endfunction

" let g:EditorConfig_exclude_patterns = ['fugitive://.*']
" Plug 'editorconfig/editorconfig-vim'

" Run :Prettier to format the file, release/1.x branch has plugins (php,
" python support)
let g:prettier#config#tab_width = '2'
let g:prettier#config#semi = 'false'
let g:prettier#config#single_quote = 'true'
let g:prettier#config#trailing_coma = 'all'
let g:prettier#config#allow_parens = 'always'

let g:prettier#config#print_width = '80'

Plug 'prettier/vim-prettier', { 'do': 'yarn install' }
" Default mapping is <Leader>p, I use that for paste from system clipboard.
nmap <Leader><Leader>p <Plug>(Prettier)
let g:prettier#autoformat = 0
" This can be used to automatically format before save
" autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html Prettier
",*.css,*.less,*.scss
autocmd BufWritePre *.js,*.jsx,*.ts,*.tsx,*.vue,*.yaml,*.html Prettier

" Note: markdown can be formatted with :Prettier (for example,
" to format the markdown table, select it and run :Prettier)

" TODO: there is a problem with python linting setup (both Coc-based and Neomake):
" - I have flake8 config under `backend` folder and flake doesn't see it when
"   run by coc or neomake
"   - simple solution: create .flake8 config in the root project folder
"   - ideal solution: config is found automatically by traversing up from the
"   current file directory
if has('nvim')
  " There was a problem with Neovim not seeing python
  let g:python2_host_prog = '/usr/bin/python'
  let g:python3_host_prog = '/usr/local/bin/python3'
endif

" The prettier/plugin-python is marked as deprecated, page says
" to use black instead, see https://github.com/prettier/plugin-python
" requires ``
" Plug 'psf/black'
" Temporary pin version, see https://github.com/psf/black/issues/1293
" Plug 'psf/black', { 'tag': '19.10b0' }
" Plug 'psf/black'
"
" Note: Had a "No module named 'regex._regex'; 'regex' is not a package" error
" solved by running 'pip3 install --force-reinstall regex'
" I suspect this was caused by combination of black setup (it uses own regex)
" and my setup for python (see code below `if has("python")...`.
" The `pip3 install` command above was executed on the host, no active virtual
" environment (so this is for the system python).
" When project venv is activated - still getting the same error, fixed by
" also adding
"   alias python=/usr/local/bin/python3
" to ~/.zshrc
" Also removed and re-created black venv:
"   cd ~/.vim
"   rm -r black_venv
"   virtualenv -p python3 black_venv
"   source black_venv/bin/activate
"   pip install --upgrade git+https://github.com/psf/black.git
" let g:black_virtualenv = '~/.vim/black_venv'
" Plug 'psf/black'  " , { 'branch': 'stable' }
" Black plugin is completely broken for me after brew's python update
" I tried to reinstall it, recreate venvs, etc - it still doesn't work
" throwing different errors (not being able to find black, can not import
" _ast3, can not find 'find_pyproject_toml' attribute)
" Somehow, I managed to fix it for a few days and then it was broken
" again.
" At the same time, command line tool (:!black) works well, so I am
" using that instead, with custom implementation of the :Black command:

function! RunBlackAndISort()
  silent :!black %
  silent :!isort %
  :e
endfunction
command! BlackAndSort :call RunBlackAndISort()

autocmd BufWritePost *.py execute ':BlackAndSort'
" autocmd BufWritePre *.py execute ':BlackAndSort'

" Syntax checker
" Python - pip install flake8 (pyflakes + pep8)
"          pip install pep257 - docstring conventions
"          pip install mypy-lang - python3 static type checks
"          pip install vulture - dead code checks
"          pip install frosted - pyflakes re-work
"          pip install pylint
" Note: pylint also checks docstrings + gives a lot of other notices, not
" always useful
" The pylint behavior can be modified via pylintrc (place into the project
" root) or with special comments, like:
"
"    except Exception as error:  # pylint: disable=W0703
"
" here we disable the [broad-except] warning, the warning name is shown in
" the error message
"
" The warning id (W0703) can be shown using pylint itself:
"
" $ pylint --help-msg broad-except
"  :broad-except (W0703): *Catching too general exception %s*
"  Used when an except catches a too general exception, possibly burying
"  unrelated errors. This message belongs to the exceptions checker.
"
" For flake8, to disable the error check use comment # noqa
" to disable the specific error # noqa: F401
"
" coc has linting support too, see coc-settings.json
" if has('nvim')
"   " To get the errors, save the file or run :Neomake
"   " then open the local error list with :lopen to see the
"   " errors (and it is possible to navigate via ]l [l - this is from unimpaired
"   Plug 'benekastah/neomake'
"   let g:neomake_css_enabled_makers = ['csslint']
"   " Available checkers: flake8 pep257 pep8 pyflakes pylama pylint python vulture py3kwarn
"   " To run checker manually use :Neomake vulture
"   " let g:neomake_python_enabled_makers = ['pep257', 'flake8', 'mypy']
"   let g:neomake_python_enabled_makers = ['flake8', 'mypy']
"   let g:neomake_open_list = 2
"   "let g:neomake_python_enabled_makers = ['python', 'flake8', 'frosted', 'pylint', 'pep257']
"   autocmd! BufWritePost * Neomake
" else
"   " Syntastic
"   Plug 'scrooloose/syntastic'
"   " It places errors into local error list which can be viewed with :Errors
"   " With unimpaired plugin you can move to the next / prev error with ]l / [l
"   "
"   " PHP - PHPCS
"   " set default standard for phpcs: sudo phpcs --config-set default_standard PSR2
"   " it is also possible to configure options for each checker, see
"   " syntastic helt - "syntastic-config-makeprg"
"   let g:syntastic_check_on_open=0
"   let g:syntastic_css_checkers = ['csslint']
"   let g:syntastic_javascript_checkers = ['eslint', 'flow', 'jshint']
"   " Available checkers: flake8 pep257 pep8 pyflakes pylint python
"   let g:syntastic_python_checkers = ['python', 'flake8']
" endif

" Use :CoverageShow to show file coverage for the current buffer.
" Use :CoverageToggle to toggle coverage visibility for the current file.
" For python requires `pip install coverage`
" Add maktaba and coverage to the runtimepath.
" (The latter must be installed before it can be used.)
Plug 'google/vim-maktaba'
Plug 'google/vim-coverage'

if has('nvim')

  " Better display for messages
  set cmdheight=2
  " Smaller updatetime for CursorHold & CursorHoldI
  set updatetime=300
  " don't give |ins-completion-menu| messages.
  set shortmess+=c
  " always show signcolumns
  set signcolumn=yes

  " Disable in favor of nvim LSP client and nvim-lspconfig
  " source ~/.vim/.vimrc.ide.coc
  
  " LSP client configurations
  " :LspInfo - see diagnostics
  " :LspStart <config_name> Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Pass autostart = false to your .setup{} call for a language server if you would like to launch clients solely with this command. Defaults to all servers matching current buffer filetype.
  " :LspStop <client_id> Defaults to stopping all buffer clients.
  " :LspRestart <client_id> Defaults to restarting all buffer clients.
  Plug 'neovim/nvim-lspconfig'

  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

  " Folding with treesitter.
  set foldexpr=nvim_treesitter#foldexpr()
  augroup ts_folding
      au!
      au FileType javascript setlocal foldmethod=expr
      au FileType typescript setlocal foldmethod=expr
      au FileType python setlocal foldmethod=expr
      au FileType vue setlocal foldmethod=expr
  augroup END

  " Completions {{{
    "set completeopt=longest,menuone,preview " use a pop up menu for completions
    " set completeopt=menuone,longest,preview " use a pop up menu for completions
    set completeopt=menuone,noinsert,noselect
    set complete=""             " what use for completions
    set complete+=.             " current buffer
    set complete+=t             " tags
    set complete+=kspell        " dictionary
    set complete+=b             " other open buffers

    " tag files
    " ';/' - this will look in the current directory for "tags", and work up the tree
    " towards root until one is found
    " set tags=tags;/
  " }}}

  " Note: another alternative - https://github.com/hrsh7th/nvim-cmp/
  " main one
  Plug 'ms-jpq/coq_nvim', {'branch': 'coq'}
  " 9000+ Snippets
  Plug 'ms-jpq/coq.artifacts', {'branch': 'artifacts'}

  " lua & third party sources -- See https://github.com/ms-jpq/coq.thirdparty
  " Need to **configure separately**

  Plug 'ms-jpq/coq.thirdparty', {'branch': '3p'}
  " - shell repl
  " - nvim lua api
  " - scientific calculator
  " - comment banner
  " - etc

  " Display LSP references via fzf
  " In addition, the plugin creates the following commands:
  "  :LspDiagnostics <bufnr>: list diagnostics from given buffer (use 0 for current buffer)
  "  :LspDiagnosticsAll: list diagnostics from all buffers
  " By default the following FZF actions are available:
  "  tab : select multiple entries
  "  shift+tab : deselect an entry
  "  ctrl-a : select all entries
  "  ctrl-d : deselect all entries
  "  ctrl-t : go to location in a new tab
  "  ctrl-v : go to location in a vertical split
  "  ctrl-x : go to location in a horizontal split
  Plug 'ojroques/nvim-lspfuzzy'

  " Preview for substitute
  set inccommand=nosplit
else
  Plug 'davidhalter/jedi-vim'
  " fetching can take a long time causing the timeout
  " to manually install it
  "  git clone --recursive https://github.com/Valloric/YouCompleteMe.git
  Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
endif

" Note: coc.nvim supports UlitSnips snippets from honza/vim-snippets
Plug 'SirVer/ultisnips'
" " Activate with TAB, better with autocompletion plugin,
" " the UlitSnips adds entries marked [US]
" " select the one you need and press <Tab>,
" " don't go out of insert mode, enter parts of the template
" " and press <Tab> again to move to the next placeholder
" " If you exit the insert mode - just get into insert again and
" " use <Tab> / <Shift-Tab> to move between placeholders.
" "
" " http://0x3f.org/blog/make-youcompleteme-ultisnips-compatible/
" " let g:ycm_key_list_select_completion = ['<C-TAB>', '<Down>']
" " let g:ycm_key_list_previous_completion = ['<C-S-TAB>', '<Up>']
" " let g:SuperTabDefaultCompletionType = '<C-Tab>'

" let g:ycm_autoclose_preview_window_after_completion = 1
" let g:ycm_autoclose_preview_window_after_insertion = 1
" let g:ycm_key_list_select_completion = []
" let g:ycm_key_list_previous_completion = []
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:ultisnips_python_style="google"
let g:UltiSnipsExpandTrigger="<c-tab>"
let g:UltiSnipsListSnippets="<c-s-tab>"
" repository of snippets
Plug 'honza/vim-snippets'

"""""" PHP
" php completion - it should be copied to autoload/phpcomplete.vim
" Plug 'shawncplus/phpcomplete.vim'
" php 5.3 syntax
" Plug 'StanAngeloff/php.vim'
" Plug '2072/PHP-Indenting-for-VIm'

"""""" Javascript
Plug 'pangloss/vim-javascript'
let g:javascript_conceal = 0
Plug 'othree/javascript-libraries-syntax.vim'
let g:used_javascript_libs = 'jquery,underscore,angularjs'
" ejs templates syntax highlight
Plug 'briancollins/vim-jst'
" vue componetns
" Plug 'posva/vim-vue'

" Typescript syntax
Plug 'leafgarland/typescript-vim'
" For some reason, typescript files are recognized as XML
autocmd BufNewFile,BufRead *.ts setlocal filetype=typescript
" Typescript completion, etc - disable, there is coc.nvim
" Requires "npm install -g typescript"
" Plug 'Quramy/tsuquyomi'

" solidity syntax
Plug 'tomlion/vim-solidity'

"""""" JSON
" better json highlighting
Plug 'elzr/vim-json'

"""""" Python
" Improved syntax highlight
Plug 'hdima/python-syntax'

" Add the virtualenv's site-packages to vim path
if has("python")
python << EOF
import os.path
import sys
import vim
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  sys.path.insert(0, project_base_dir)
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF
endif
if has("python3")
python3 << EOF
import os.path
import sys
# import vim
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  sys.path.insert(0, project_base_dir)
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  activate_source = open(activate_this, "rb").read()
  exec(compile(activate_source, activate_this, 'exec'), dict(__file__=activate_this))
EOF
endif

" Install: cd ~/.vim/bundle/ropevim
"          python setup.py install
" See: https://github.com/python-rope/ropevim
" Plug 'python-rope/ropevim'
" let ropevim_vim_completion=1
" let ropevim_extended_complete=1

"Plug 'klen/python-mode'
" Correct python code indenting
Plug 'hynek/vim-python-pep8-indent'
" :Ped sqlalchemy.orm -> open the module from current virtual env
Plug 'sloria/vim-ped'
" " Generate docstrings with :Pydocstring
" "   note: UltiSnips is also able to generate docstring templates, but
" "         I didn't find the way to trigger it for already existing code
" let g:template_vim_template_dir = $HOME . "/.vim/templates/pydocstring"
" Plug 'heavenshell/vim-pydocstring'
" nmap <silent> <nop> <Plug>(pydocstring)
" augroup DocMap
"   autocmd!
"   autocmd FileType python nnoremap <Leader>pd :Pydocstring<CR>
" augroup END
"
let g:doge_doc_standard_python = 'google'
let g:doge_mapping = '<Leader>pd'
" Generate docstrings for different languages
" Tab / Shift-Tab to move between placeholders.
" :DogeGenerate to generate manually or use <Leader>pd.
Plug 'kkoomen/vim-doge'

"""""" Documentation
" php documenter
" Plug 'mikehaertl/pdv-standalone'
" phpDocumenter
" let g:pdv_cfg_Package = "app"
" let g:pdv_cfg_Version = ""
" let g:pdv_cfg_Author = "Boris Serebrov"
" let g:pdv_cfg_Copyright = ""
" let g:pdv_cfg_License = ""
Plug 'heavenshell/vim-jsdoc'
"JSDoc
let g:jsdoc_default_mapping = 0
augroup DocMap
  autocmd!

  " autocmd FileType php inoremap <Leader>pd <ESC>:call PhpDocSingle()<CR>i
  " autocmd FileType php nnoremap <Leader>pd :call PhpDocSingle()<CR>
  " autocmd FileType php vnoremap <Leader>pd :call PhpDocRange()<CR>

  autocmd FileType javascript nnoremap <Leader>pd :JsDoc<CR>

augroup END

